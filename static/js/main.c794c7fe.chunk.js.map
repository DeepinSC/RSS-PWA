{"version":3,"sources":["serviceWorker.js","Appshell/components/Home.jsx","App.js","index.js","logo.svg"],"names":["config","Home","react_default","a","createElement","page_header","onBack","title","subTitle","extra","es_button","key","type","className","src","logo","alt","href","target","rel","Component","App","BrowserRouter","Switch","Route","exact","path","component","Redirect","from","to","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports","__webpack_require__","p"],"mappings":"qGAsByBA,kKCiBVC,0LAhCP,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYC,OAAQ,kBAAM,MAAMC,MAAM,QAAQC,SAAS,qBAC3CC,MAAO,CACHP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAQC,IAAI,KAAZ,aACAT,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAQC,IAAI,KAAZ,aACAT,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAQC,IAAI,IAAIC,KAAK,WAArB,cAKhBV,EAAAC,EAAAC,cAAA,OAAKS,UAAU,QACXX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,eACXX,EAAAC,EAAAC,cAAA,OAAKU,IAAKC,IAAMF,UAAU,YAAYG,IAAI,SAC1Cd,EAAAC,EAAAC,cAAA,SACIF,EAAAC,EAAAC,cAAA,+BAEJF,EAAAC,EAAAC,cAAA,KACIS,UAAU,YACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJR,yBAnBLC,cCgBJC,2LAbX,OACEnB,EAAAC,EAAAC,cAAA,OAAKS,UAAU,OACXX,EAAAC,EAAAC,cAACkB,EAAA,EAAD,KACIpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,KACIrB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,UAAW1B,IACtCC,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAUC,KAAK,IAAIC,GAAG,qBAPtBV,cFMZW,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAuCN,SAASC,EAAgBC,EAAOtC,GAC9BuC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEnD,GAAUA,EAAOoD,UACnBpD,EAAOoD,SAAST,KAMlBO,QAAQC,IAAI,sCAGRnD,GAAUA,EAAOqD,WACnBrD,EAAOqD,UAAUV,UAO5BW,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,KG3FjEC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SHmB3B,IAAIC,IAAIC,WAAwB7B,OAAOC,SAASjB,MACpD8C,SAAW9B,OAAOC,SAAS6B,QAQzC9B,OAAO+B,iBAAiB,OAAQ,WAC9B,IAAM1B,EAAK,GAAA2B,OAAMH,WAAN,sBAEP/B,GAgEV,SAAiCO,EAAOtC,GAEtCkE,MAAM5B,GACHI,KAAK,SAAAyB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5CjC,UAAUC,cAAciC,MAAM/B,KAAK,SAAAC,GACjCA,EAAa+B,aAAahC,KAAK,WAC7BT,OAAOC,SAASyC,aAKpBtC,EAAgBC,EAAOtC,KAG1BsD,MAAM,WACLJ,QAAQC,IACN,mEArFAyB,CAAwBtC,EAAOtC,GAI/BuC,UAAUC,cAAciC,MAAM/B,KAAK,WACjCQ,QAAQC,IACN,gHAMJd,EAAgBC,EAAOtC,yBInD/B6E,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.c794c7fe.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' || 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n    // Rick: use Workbox to manage static files of Webpack\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport logo from '../../logo.svg';\nimport { PageHeader, Button } from 'antd';\nimport '../styles/Home.css';\n\nclass Home extends Component {\n    render() {\n        return (\n            <div>\n                <PageHeader onBack={() => null} title=\"Title\" subTitle=\"This is a subtitle\"\n                            extra={[\n                                <Button key=\"3\">Operation</Button>,\n                                <Button key=\"2\">Operation</Button>,\n                                <Button key=\"1\" type=\"primary\">\n                                    Primary\n                                </Button>,\n                            ]}\n                />\n                <div className=\"Home\">\n                    <div className=\"Home-header\">\n                        <img src={logo} className=\"Home-logo\" alt=\"logo\" />\n                        <p>\n                            <code>Welcome to PWA</code>\n                        </p>\n                        <a\n                            className=\"Home-link\"\n                            href=\"https://reactjs.org\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            Learn React\n                        </a>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\nimport {BrowserRouter as Router, Route, Switch, Redirect} from 'react-router-dom'\nimport './App.css';\nimport Home from './Appshell/components/Home'\nimport 'antd/dist/antd.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n          <Router>\n              <Switch>\n                  <Route exact path=\"/home/\" component={Home}/>\n                  <Redirect from=\"/\" to=\"/home/\"/>\n              </Switch>\n          </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}